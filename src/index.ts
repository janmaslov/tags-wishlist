import '@kitajs/html/register';
import { Elysia, t } from 'elysia';
import { staticPlugin } from '@elysiajs/static'
import { join, dirname } from 'path';
import cookie from '@elysiajs/cookie';
import jwt from '@elysiajs/jwt';
import { renderIndexPage, addWishlistItem, renderWishlist, getOrCreateUser, renderSignInPage, authenticateWithJellyfin, getUser, isAdmin, getWishlistItem, editWishlistItem, deleteWishlistItem } from './handlers';
import { AddEditModal } from './views/components/modals/AddEditModal';
import { ErrorModal } from './views/components/modals/ErrorModal';
import { User } from './types';

const staticFilesDir = Bun.env.NODE_ENV === 'production' ? join(dirname(Bun.main), '..', 'public') : 'public';
export const basePath = Bun.env.BASE_PATH ?? '';

export const app = new Elysia({prefix: basePath})
	.onError(console.error)
	.use(staticPlugin({assets: staticFilesDir, alwaysStatic: false, enableDecodeURI: true, indexHTML: false, prefix: '/public'}))
	.use(jwt({
		secret: 'U3^ei~UFN5*rhXT^+}**~FCVVY)$lj:h=KZt^e+,9@.;Sslqc}8nio5itq^Or'
	}))
	.use(cookie())

	.get('/', async ({ set, jwt, cookie: { wishlistauth, jellyfinId } }) => {
		const jwtauth = await jwt.verify(wishlistauth);

		if(!jwtauth){
			set.status = 401;
			set.redirect = `${basePath}/sign-in`;
			return 'Unauthorized';
		}

		const user = await getUser(jellyfinId);

		set.headers['Content-Type'] = 'text/html; charset=utf8';
		return await renderIndexPage(user);
	})
	.ws('/refreshlist', {
		open: (ws) => {
			console.log('subscribe list update', ws.id);
			ws.subscribe('refreshList');
		},
		close: (ws) => {
			console.log('remove list update', ws.id);
			ws.unsubscribe('refreshList');
		},
		error: (e) => console.error(e.error),
		perMessageDeflate: true
	})
	.ws('/refresharchived', {
		open: (ws) => {
			console.log('subscribe archived update', ws.id);
			ws.subscribe('refreshArchived');
		},
		close: (ws) => {
			console.log('remove archived update', ws.id);
			ws.unsubscribe('refreshArchived');
		},
		error: (e) => console.error(e.error),
		perMessageDeflate: true
	})

	.get('/sign-in', async ({ set, jwt, cookie: { wishlistauth } }) => {
		const jwtauth = await jwt.verify(wishlistauth);

		if(jwtauth){
			set.redirect = !!basePath ? basePath : '/';
			return '';
		}

		set.headers['Content-Type'] = 'text/html; charset=utf8';
		return await renderSignInPage();
	})
	.post('/sign-in', async ({ setCookie, jwt, body, set }) => {
		try{
			if((body?.username?.length ?? 0) === 0 || (body?.password?.length ?? 0) === 0) throw new Error('Unauthorized');

			const jellyfinAuth = await authenticateWithJellyfin(body.username, body.password);

			if(!(jellyfinAuth instanceof Object)) throw new Error('Unauthorized');

			const user = {
				jellyfinId: jellyfinAuth.User.Id,
				name: jellyfinAuth.User.Name
			};

			setCookie('wishlistauth', await jwt.sign(user), {
				httpOnly: true,
				maxAge: 7 * 86400,
				path: !!basePath ? basePath : '/'
			});
			setCookie('jellyfinId', user.jellyfinId, {
				httpOnly: true,
				maxAge: 7 * 86400,
				path: !!basePath ? basePath : '/'
			});
			setCookie('name', user.name, {
				httpOnly: true,
				maxAge: 7 * 86400,
				path: !!basePath ? basePath : '/'
			});

			set.redirect = !!basePath ? basePath : '/';
			return '';
		}catch(e: any){
			console.error(`username: ${body.username ?? '%undefined%'} couldn't log in:`, e.message);
			set.status = 401;
			set.redirect = `${basePath}/sign-in`;
			return '';
		}
	}, {
		body: t.Object({
			username: t.String(),
			password: t.String()
		})
	})
	.get('/sign-out', async ({ removeCookie, set }) => {
		removeCookie('wishlistauth');
		set.redirect = `${basePath}/sign-in`;
		return '';
	})

	.group('/wishlist', (app) => app
		.get('/add', async ({ set, cookie }) => {
			set.headers['Content-Type'] = 'text/html; charset=utf8';
			return await AddEditModal({admin: isAdmin(cookie.jellyfinId as unknown as string ?? '')});
		})
		.post('/add', async ({ set, body, cookie: { jellyfinId, name } }) => {
			try{
				const user = await getOrCreateUser(jellyfinId, name);
				await addWishlistItem({...body, ...{createdBy: user.jellyfinId}});
				await Promise.all([
					emitWishlistRefreshEvent(user),
					emitArchivedlistRefreshEvent(user)
				]);
			}catch(e: any){
				console.error(e);
				set.headers['Content-Type'] = 'text/html; charset=utf8';
				set.status = 500;
				return await ErrorModal(e.message);
			}

			return '';
		}, {
			body: t.Object({
				//id - generated by database
				//status - generated by database, set later
				//lastStatusChange - generated by database, set later
				type: t.Numeric(),
				name: t.String(),
				poster: t.String(),
				createdBy: t.Optional(t.String()),
				//createdAt - generated by database
				year: t.Numeric(),
				imdbId: t.Optional(t.String()),
				tmdbId: t.Optional(t.String()),
				tvdbId: t.Optional(t.String())
			})
		})
		.get('/edit/:itemId', async ({ set, cookie, params: {itemId} }) => {
			const item = await getWishlistItem(Number(itemId));

			set.headers['Content-Type'] = 'text/html; charset=utf8';
			return await AddEditModal({item, admin: isAdmin(cookie.jellyfinId as unknown as string ?? '')});
		})
		.post('/edit', async ({ set, body, cookie: { jellyfinId, name } }) => {
			try{
				const user = await getOrCreateUser(jellyfinId, name);
				await editWishlistItem(body);
				await Promise.all([
					emitWishlistRefreshEvent(user),
					emitArchivedlistRefreshEvent(user)
				]);
			}catch(e: any){
				console.error(e);
				set.headers['Content-Type'] = 'text/html; charset=utf8';
				set.status = 500;
				return await ErrorModal(e.message);
			}

			return '';
		}, {
			body: t.Object({
				id: t.Optional(t.Numeric()),
				status: t.Optional(t.Numeric()),
				//lastStatusChange
				type: t.Optional(t.Numeric()),
				name: t.Optional(t.String()),
				poster: t.Optional(t.String()),
				createdBy: t.Optional(t.String()),
				//createdAt
				year: t.Optional(t.Numeric()),
				imdbId: t.Optional(t.String()),
				tmdbId: t.Optional(t.String()),
				tvdbId: t.Optional(t.String())
			})
		})
		.post('/delete/:itemId', async ({ params: {itemId}, cookie: {jellyfinId} }) => {
			const user = await getUser(jellyfinId);

			if(!user) return '';

			const deleteResult = await deleteWishlistItem(Number(itemId), user?.jellyfinId);
			await Promise.all([
				emitWishlistRefreshEvent(user),
				emitArchivedlistRefreshEvent(user)
			]);

			return '';
		})
	)

	.listen(3000);

console.log(`(${Bun.env.NODE_ENV}) ðŸ¦Š Elysia is running at ${app.server?.hostname}:${app.server?.port}`);

const emitWishlistRefreshEvent = async (user: User) => {
	const wishlist = await renderWishlist(user, false);
	console.log('publish refreshList');
	app.server?.publish('refreshList', wishlist);
}
const emitArchivedlistRefreshEvent = async (user: User) => {
	const wishlist = await renderWishlist(user, true);
	console.log('publish archivedList');
	app.server?.publish('refreshArchived', wishlist);
}